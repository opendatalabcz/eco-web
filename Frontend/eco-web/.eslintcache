[{"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\index.js":"1","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\App.js":"2","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\reportWebVitals.js":"3","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\i18n.js":"4","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\SideBar\\SideBarVisibilityContext.js":"5","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DarkContext.js":"6","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\SideBar\\SideBar.js":"7","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\TopBar\\ButtonsVisibilityContext.js":"8","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\TopBar\\TopBar.js":"9","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\HomePage.js":"10","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Themes.js":"11","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\SideBar\\NavBar.js":"12","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\SideBar\\SubNav.js":"13","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\SideBar\\NavBarContent.js":"14","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\TemperatureSelectionPage.js":"15","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Region.js":"16","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Station.js":"17","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\GraphsPage.js":"18","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Temperature.js":"19","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\LoadingComponent.js":"20","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataVisualisation\\Data.js":"21","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\HydrometeoTypes.js":"22","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\LegalPage.js":"23","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\HelpPage.js":"24","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\TopBar\\ControllButtons.js":"25","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\AllSelectors.js":"26","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\SelectedOptions.js":"27","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Selectors\\SourceSelector.js":"28","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Selectors\\DateRangeSelector.js":"29","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Selectors\\LevelSelector.js":"30","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Selectors\\GraphSelector.js":"31","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Containers\\SelectorContainer.js":"32","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Pressure.js":"33","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Precipitation.js":"34","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Water.js":"35","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Wind.js":"36","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Shine.js":"37","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Snow.js":"38","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\PressureSelectionPage.js":"39","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\PrecipitationSelectionPage.js":"40","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\ShineSelectionPage.js":"41","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\WaterSelectionPage.js":"42","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\SnowSelectionPage.js":"43","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\WindSelectionPage.js":"44","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataVisualisation\\Map\\GeoMap.js":"45","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataVisualisation\\Graph\\GraphsContainer.js":"46","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataVisualisation\\Graph\\Graph.js":"47","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Containers\\SelectorDialog.js":"48","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\TopBar\\HideButton.js":"49","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\SideBar\\AppSettings.js":"50","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\CompareSelectPage.js":"51","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Compare\\CompareContext.js":"52","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Compare\\CompareSourceSelector.js":"53","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Compare\\CompareGraphSelector.js":"54","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\CompareGraphPage.js":"55","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataVisualisation\\Graph\\GraphCompareContainer.js":"56"},{"size":772,"mtime":1620297229554,"results":"57","hashOfConfig":"58"},{"size":4667,"mtime":1624824843216,"results":"59","hashOfConfig":"58"},{"size":375,"mtime":1620296573242,"results":"60","hashOfConfig":"58"},{"size":1020,"mtime":1620297229552,"results":"61","hashOfConfig":"58"},{"size":409,"mtime":1620297229550,"results":"62","hashOfConfig":"58"},{"size":632,"mtime":1620297229528,"results":"63","hashOfConfig":"58"},{"size":1923,"mtime":1624730392724,"results":"64","hashOfConfig":"58"},{"size":410,"mtime":1620297229551,"results":"65","hashOfConfig":"58"},{"size":1286,"mtime":1624728907812,"results":"66","hashOfConfig":"58"},{"size":2535,"mtime":1624712655870,"results":"67","hashOfConfig":"58"},{"size":1733,"mtime":1620490212578,"results":"68","hashOfConfig":"58"},{"size":643,"mtime":1620297229529,"results":"69","hashOfConfig":"58"},{"size":3458,"mtime":1620297229550,"results":"70","hashOfConfig":"58"},{"size":1446,"mtime":1622205258785,"results":"71","hashOfConfig":"58"},{"size":833,"mtime":1622476023844,"results":"72","hashOfConfig":"58"},{"size":660,"mtime":1624740412170,"results":"73","hashOfConfig":"58"},{"size":310,"mtime":1620317480656,"results":"74","hashOfConfig":"58"},{"size":1574,"mtime":1624713009094,"results":"75","hashOfConfig":"58"},{"size":3570,"mtime":1623870030880,"results":"76","hashOfConfig":"58"},{"size":1288,"mtime":1620663850138,"results":"77","hashOfConfig":"58"},{"size":12741,"mtime":1624818621335,"results":"78","hashOfConfig":"58"},{"size":212,"mtime":1621883029562,"results":"79","hashOfConfig":"58"},{"size":2267,"mtime":1622218655751,"results":"80","hashOfConfig":"58"},{"size":5071,"mtime":1622389841104,"results":"81","hashOfConfig":"58"},{"size":16227,"mtime":1624738644594,"results":"82","hashOfConfig":"58"},{"size":13102,"mtime":1624738477463,"results":"83","hashOfConfig":"58"},{"size":602,"mtime":1624740962075,"results":"84","hashOfConfig":"58"},{"size":6330,"mtime":1623092396136,"results":"85","hashOfConfig":"58"},{"size":3758,"mtime":1623094023737,"results":"86","hashOfConfig":"58"},{"size":1343,"mtime":1623007303310,"results":"87","hashOfConfig":"58"},{"size":1247,"mtime":1624744165777,"results":"88","hashOfConfig":"58"},{"size":993,"mtime":1622479118214,"results":"89","hashOfConfig":"58"},{"size":3183,"mtime":1623875758490,"results":"90","hashOfConfig":"58"},{"size":3678,"mtime":1623876264376,"results":"91","hashOfConfig":"58"},{"size":3102,"mtime":1623877986858,"results":"92","hashOfConfig":"58"},{"size":3228,"mtime":1623877437644,"results":"93","hashOfConfig":"58"},{"size":3120,"mtime":1623876560322,"results":"94","hashOfConfig":"58"},{"size":3327,"mtime":1623877087638,"results":"95","hashOfConfig":"58"},{"size":824,"mtime":1623879444226,"results":"96","hashOfConfig":"58"},{"size":839,"mtime":1623905803273,"results":"97","hashOfConfig":"58"},{"size":815,"mtime":1623881037406,"results":"98","hashOfConfig":"58"},{"size":815,"mtime":1623881245242,"results":"99","hashOfConfig":"58"},{"size":812,"mtime":1623881392846,"results":"100","hashOfConfig":"58"},{"size":812,"mtime":1623881513029,"results":"101","hashOfConfig":"58"},{"size":10407,"mtime":1624825415275,"results":"102","hashOfConfig":"58"},{"size":11813,"mtime":1624713653933,"results":"103","hashOfConfig":"58"},{"size":2223,"mtime":1624227369528,"results":"104","hashOfConfig":"58"},{"size":1142,"mtime":1624265302971,"results":"105","hashOfConfig":"58"},{"size":1638,"mtime":1624729183914,"results":"106","hashOfConfig":"58"},{"size":3688,"mtime":1624730291768,"results":"107","hashOfConfig":"58"},{"size":18828,"mtime":1624828030516,"results":"108","hashOfConfig":"58"},{"size":755,"mtime":1624823309591,"results":"109","hashOfConfig":"58"},{"size":5833,"mtime":1624742542939,"results":"110","hashOfConfig":"58"},{"size":1275,"mtime":1624822138591,"results":"111","hashOfConfig":"58"},{"size":15498,"mtime":1624827107692,"results":"112","hashOfConfig":"58"},{"size":4742,"mtime":1624828770901,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"uaqcqy",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"116"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"116"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\index.js",[],["230","231"],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\App.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\reportWebVitals.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\i18n.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\SideBar\\SideBarVisibilityContext.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DarkContext.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\SideBar\\SideBar.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\TopBar\\ButtonsVisibilityContext.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\TopBar\\TopBar.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\HomePage.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Themes.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\SideBar\\NavBar.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\SideBar\\SubNav.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\SideBar\\NavBarContent.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\TemperatureSelectionPage.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Region.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Station.js",[],["232","233"],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\GraphsPage.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Temperature.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\LoadingComponent.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataVisualisation\\Data.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\HydrometeoTypes.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\LegalPage.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\HelpPage.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\TopBar\\ControllButtons.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\AllSelectors.js",["234"],"import { Button, createMuiTheme, makeStyles, Paper, ThemeProvider, Typography } from '@material-ui/core';\r\nimport React, { useContext, useState } from 'react';\r\nimport SourceSelector from './Selectors/SourceSelector';\r\nimport LevelSelector from './Selectors/LevelSelector';\r\nimport { DarkContext } from '../DarkContext';\r\nimport { appThemeLight, appThemeDark } from '../../Themes';\r\nimport { useTranslation } from 'react-i18next';\r\nimport DateRangeSelector from './Selectors/DateRangeSelector';\r\nimport { NavLink } from 'react-router-dom';\r\nimport GraphSelector from './Selectors/GraphSelector';\r\nimport 'fontsource-roboto';\r\nimport SelectorContainer from './Containers/SelectorContainer';\r\nimport { DataOptionsContext } from './SelectedOptions';\r\nimport { REGIONS_WITH_STATIONS_FOR_EACH_HYDROMETEO_TYPE_QUERY } from '../../Queries/Region';\r\nimport { useQuery } from '@apollo/client';\r\nimport LoadingComponent from '../LoadingComponent';\r\nimport { hydroMeteoTypes } from './Selectors/GraphsForHydroMeteoTypes.json'\r\nimport SelectorDialog from './Containers/SelectorDialog';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    Container: {\r\n        width: '100%',\r\n        minHeight: '100vh'\r\n    },\r\n    LoadingContainer: {\r\n        width: '100%',\r\n        height: '100%'\r\n    },\r\n    SelectorContainer: {\r\n        padding: '15px',\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    ButtonContainer: {\r\n        padding: '15px',\r\n        alignContent: 'center',\r\n        justifyContent: 'center',\r\n        display: 'flex'\r\n    },\r\n    ButtonStyle: {\r\n        border: '2px solid',\r\n        '&:hover': {\r\n            border: '2px solid'\r\n        }\r\n    },\r\n    TypographyStyle: {\r\n        padding: '15px'\r\n    },\r\n    NavlinkStyle: { \r\n        textDecoration: 'none' \r\n    }\r\n}));\r\n\r\nfunction AllSelectors(props) {\r\n    const classes = useStyles();\r\n    const [isDark] = useContext(DarkContext);\r\n    const { t } = useTranslation();\r\n    const { data, error, loading } = useQuery(REGIONS_WITH_STATIONS_FOR_EACH_HYDROMETEO_TYPE_QUERY);\r\n    const [selectedOptions, setSelectedOptions] = useContext(DataOptionsContext);\r\n    const [level, setLevel] = useState('station');\r\n    const [scale, setScale] = useState('daily');\r\n    const [from, setFrom] = useState(new Date('1961-01-01'));\r\n    const [to, setTo] = useState(new Date('2019-12-31'));\r\n    const [dataType] = useState(props.selectedDataType);\r\n    const [stationSource, setStationSource] = useState([{ region: '', station: ''}]);\r\n    const [regionSource, setRegionSource] = useState([{ region: '', station: ''}]);\r\n    const options = hydroMeteoTypes.filter((element) => { return element.name === dataType })[0];\r\n    const [graphs, setGraphs] = useState([options.graphs[options.graphs.length - 1].name]);\r\n    const [openDateRangeError, setOpenDateRangeError] = useState(false);\r\n\r\n    const handleClickDialogOpen = () => {\r\n        setOpenDateRangeError(true);\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setOpenDateRangeError(false);\r\n    }\r\n\r\n    const initToggle = () => {\r\n        const values = [];\r\n        for (let i = 0; i < options.graphs.length - 1; i++) {\r\n            values.push(false);\r\n        }\r\n        values.push(true);\r\n        return values;\r\n    }\r\n\r\n    const [toggle, setToggle] = useState(initToggle());\r\n\r\n    const selectHeadlineText = (selected) => {\r\n        if (selected === 'region') return t('regions');\r\n        if (selected === 'station') return t('stations');\r\n    }\r\n\r\n    const changeLevel = (event) => {\r\n        setLevel(event.target.value);\r\n    }\r\n\r\n    const addRow = () => {\r\n        if (level === 'region') {\r\n            if (regionSource.length === 3) return;\r\n            if (regionSource.filter(element => element.region === '' && element.station === '').length > 0) return;\r\n            const newSource = [...regionSource, { region: '', station: '' }];\r\n            setRegionSource(newSource);\r\n        } else {\r\n            if (stationSource.length === 3) return;\r\n            if (stationSource.filter(element => element.region === '' && element.station === '').length > 0) return;\r\n            const newSource = [...stationSource, { region: '', station: '' }];\r\n            setStationSource(newSource);\r\n        }\r\n    };\r\n\r\n    const removeRow = (index) => {\r\n        if (level === 'region') {\r\n            if (regionSource.length === 1) return;\r\n            const newSource = [...regionSource];\r\n            newSource.splice(index, 1);\r\n            setRegionSource(newSource);\r\n        } else {\r\n            if (stationSource.length === 1) return;\r\n            const newSource = [...stationSource];\r\n            newSource.splice(index, 1);\r\n            setStationSource(newSource);\r\n        }\r\n    };\r\n\r\n    const changeRegion = (index, event) => {\r\n        if (level === 'region') {\r\n            const newSource = [...regionSource];\r\n            newSource[index].region = event.target.value;\r\n            newSource[index].station = '';\r\n            setRegionSource(newSource);\r\n        } else {\r\n            const newSource = [...stationSource];\r\n            newSource[index].region = event.target.value;\r\n            newSource[index].station = '';\r\n            setStationSource(newSource);\r\n        }\r\n    };\r\n\r\n    const changeStation = (index, event) => {\r\n        const newSource = [...stationSource];\r\n        newSource[index].station = event.target.value;\r\n        setStationSource(newSource);\r\n    };\r\n\r\n    const changeScale = (event) => {\r\n        setScale(event.target.value);\r\n    }\r\n\r\n    const changeFrom = (date) => {\r\n        setFrom(date);\r\n    }\r\n\r\n    const changeTo = (date) => {\r\n        setTo(date)\r\n    }\r\n\r\n    const isDateValid = (date) => {\r\n        if (isNaN(date)) return false;\r\n        if (date === null || date === '') return false;\r\n        if (date.getTime() < new Date('1960-12-31').getTime()) return false;\r\n        if (date.getTime() > new Date('2019-12-31').getTime()) return false;\r\n        return true;\r\n    }\r\n\r\n    const changeToggle = (event, index) => {\r\n        if (graphs.length === 1 && !event.target.checked) return;\r\n        if (event.target.checked) {\r\n            const newGraphs = [...graphs, event.target.name];\r\n            setGraphs(newGraphs);\r\n        } else {\r\n            const newGraphs = [...graphs];\r\n            const indexToRemove = newGraphs.indexOf(event.target.name);\r\n            newGraphs.splice(indexToRemove, 1);\r\n            setGraphs(newGraphs);\r\n        }\r\n        const values = [...toggle];\r\n        values[index] = event.target.checked;\r\n        setToggle(values);\r\n    }\r\n\r\n    const validRange = () => {\r\n        const yearDifference = to.getFullYear() - from.getFullYear();\r\n        if (yearDifference < 0) return false;\r\n        if (scale === 'daily' && yearDifference > 5) return false;\r\n        if (scale === 'monthly' && yearDifference > 25) return false;\r\n        return true;\r\n    }\r\n\r\n    const validateInput = () => {\r\n        if (!isDateValid(from)) return false;\r\n        if (!isDateValid(to)) return false;\r\n        if (!validRange()) {\r\n            handleClickDialogOpen();\r\n            return false;\r\n        }\r\n        if (graphs.length === 0) return false;\r\n        const emptyRegionRegions = regionSource.filter((element) => { return element.region === '' });\r\n        const emptyStationRegions = stationSource.filter((element) => { return element.region === '' });\r\n        if ((level === 'region' && emptyRegionRegions.length > 0) || (level === 'station' && emptyStationRegions.length > 0)) return false;\r\n        const emptyStations = stationSource.filter((element) => { return element.station === '' });\r\n        if (level === 'station' && emptyStations.length > 0) return false;\r\n        return true;\r\n    }\r\n\r\n    const clickHandler = (event) => {\r\n        if (!validateInput()) return event.preventDefault();\r\n        setSelectedOptions({\r\n            dataType: dataType,\r\n            source: level === 'station' ? stationSource : regionSource,\r\n            dateRange: {\r\n                scale: scale,\r\n                from: from,\r\n                to: to\r\n            },\r\n            graphs: graphs,\r\n            level: level\r\n        });\r\n    }\r\n\r\n    if (error) console.log(error);\r\n\r\n    return (\r\n        <>\r\n            <ThemeProvider theme={ createMuiTheme(isDark ? appThemeDark : appThemeLight) }>\r\n                <Paper square>\r\n                    <div className={ classes.Container }>\r\n                        { loading\r\n                            ? (\r\n                                <div className={ classes.LoadingContainer }>\r\n                                    <LoadingComponent />\r\n                                </div>\r\n                            )\r\n                            : (\r\n                                <>\r\n                                    <SelectorContainer\r\n                                        title={ t('levelSelector') }\r\n                                        selector={\r\n                                            <LevelSelector\r\n                                                value={ level }\r\n                                                onChange={ changeLevel }\r\n                                            />\r\n                                        } \r\n                                    />\r\n                                    { level === 'country'\r\n                                        ? null\r\n                                        : <SelectorContainer \r\n                                            title={ selectHeadlineText(level) }\r\n                                            selector={\r\n                                                <SourceSelector\r\n                                                    selectOptions={ data }\r\n                                                    selectedType={ dataType }\r\n                                                    selectedLevel= { level }\r\n                                                    rows={ level === 'region' ? regionSource : stationSource }\r\n                                                    addRow={ addRow }\r\n                                                    removeRow={ removeRow }\r\n                                                    changeRegion={ changeRegion }\r\n                                                    changeStation={ changeStation }\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                    }\r\n                                    <SelectorContainer\r\n                                        title={ t('dateSelector') }\r\n                                        selector={\r\n                                            <DateRangeSelector\r\n                                                scale={ scale }\r\n                                                from={ from }\r\n                                                to={ to }\r\n                                                changeScale={ changeScale }\r\n                                                changeFrom={ changeFrom }\r\n                                                changeTo={ changeTo }\r\n                                                validate={ isDateValid }\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                    <SelectorContainer\r\n                                        title={ t('graphs') }\r\n                                        selector={\r\n                                            <GraphSelector\r\n                                                options={ options }\r\n                                                values={ toggle }\r\n                                                onChange={ changeToggle }\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                    <SelectorDialog title={ t('error') } onClose={ handleDialogClose } open={ openDateRangeError }>\r\n                                        <Typography>\r\n                                            { t('bigDateDifference') }\r\n                                        </Typography>\r\n                                    </SelectorDialog>\r\n                                    <div className={ classes.ButtonContainer }>\r\n                                        <NavLink className={ classes.NavlinkStyle } onClick={ clickHandler } to='/graph' exact>\r\n                                            <Button variant='outlined' size='large' color='primary' className={ classes.ButtonStyle }>\r\n                                                { t('showButton') }\r\n                                            </Button>\r\n                                        </NavLink>\r\n                                    </div>\r\n                                </>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Paper>\r\n            </ThemeProvider>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AllSelectors\r\n","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\SelectedOptions.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Selectors\\SourceSelector.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Selectors\\DateRangeSelector.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Selectors\\LevelSelector.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Selectors\\GraphSelector.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Containers\\SelectorContainer.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Pressure.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Precipitation.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Water.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Wind.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Shine.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Queries\\Snow.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\PressureSelectionPage.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\PrecipitationSelectionPage.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\ShineSelectionPage.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\WaterSelectionPage.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\SnowSelectionPage.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\WindSelectionPage.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataVisualisation\\Map\\GeoMap.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataVisualisation\\Graph\\GraphsContainer.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataVisualisation\\Graph\\Graph.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Containers\\SelectorDialog.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\TopBar\\HideButton.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\SideBar\\AppSettings.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\CompareSelectPage.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Compare\\CompareContext.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Compare\\CompareSourceSelector.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataOptions\\Compare\\CompareGraphSelector.js",[],"E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Pages\\CompareGraphPage.js",["235"],"import React, { useEffect } from 'react';\r\nimport { createMuiTheme, makeStyles, Paper, ThemeProvider } from '@material-ui/core';\r\nimport { useQuery } from '@apollo/client';\r\nimport LoadingComponent from '../Components/LoadingComponent';\r\nimport { format } from 'date-fns'\r\nimport 'fontsource-roboto';\r\nimport { \r\n    DAILY_TEMPERATURE_QUERY,\r\n    ANNUAL_COUNTRY_TEMPERATURE_QUERY,\r\n    ANNUAL_REGIONAL_TEMPERATURE_QUERY,\r\n    ANNUAL_TEMPERATURE_QUERY,\r\n    DAILY_COUNTRY_TEMPERATURE_QUERY,\r\n    DAILY_REGIONAL_TEMPERATURE_QUERY,\r\n    MONTHLY_COUNTRY_TEMPERATURE_QUERY,\r\n    MONTHLY_REGIONAL_TEMPERATURE_QUERY,\r\n    MONTHLY_TEMPERATURE_QUERY,\r\n} from '../Queries/Temperature';\r\nimport { \r\n    DAILY_PRECIPITATION_QUERY,\r\n    ANNUAL_COUNTRY_PRECIPITATION_QUERY,\r\n    ANNUAL_REGIONAL_PRECIPITATION_QUERY,\r\n    ANNUAL_PRECIPITATION_QUERY,\r\n    DAILY_COUNTRY_PRECIPITATION_QUERY,\r\n    DAILY_REGIONAL_PRECIPITATION_QUERY,\r\n    MONTHLY_COUNTRY_PRECIPITATION_QUERY,\r\n    MONTHLY_REGIONAL_PRECIPITATION_QUERY,\r\n    MONTHLY_PRECIPITATION_QUERY,\r\n} from '../Queries/Precipitation';\r\nimport { \r\n    DAILY_PRESSURE_QUERY,\r\n    ANNUAL_COUNTRY_PRESSURE_QUERY,\r\n    ANNUAL_REGIONAL_PRESSURE_QUERY,\r\n    ANNUAL_PRESSURE_QUERY,\r\n    DAILY_COUNTRY_PRESSURE_QUERY,\r\n    DAILY_REGIONAL_PRESSURE_QUERY,\r\n    MONTHLY_COUNTRY_PRESSURE_QUERY,\r\n    MONTHLY_REGIONAL_PRESSURE_QUERY,\r\n    MONTHLY_PRESSURE_QUERY,\r\n} from '../Queries/Pressure';\r\nimport { \r\n    DAILY_WATER_QUERY,\r\n    ANNUAL_COUNTRY_WATER_QUERY,\r\n    ANNUAL_REGIONAL_WATER_QUERY,\r\n    ANNUAL_WATER_QUERY,\r\n    DAILY_COUNTRY_WATER_QUERY,\r\n    DAILY_REGIONAL_WATER_QUERY,\r\n    MONTHLY_COUNTRY_WATER_QUERY,\r\n    MONTHLY_REGIONAL_WATER_QUERY,\r\n    MONTHLY_WATER_QUERY,\r\n} from '../Queries/Water';\r\nimport { \r\n    DAILY_WIND_QUERY,\r\n    ANNUAL_COUNTRY_WIND_QUERY,\r\n    ANNUAL_REGIONAL_WIND_QUERY,\r\n    ANNUAL_WIND_QUERY,\r\n    DAILY_COUNTRY_WIND_QUERY,\r\n    DAILY_REGIONAL_WIND_QUERY,\r\n    MONTHLY_COUNTRY_WIND_QUERY,\r\n    MONTHLY_REGIONAL_WIND_QUERY,\r\n    MONTHLY_WIND_QUERY,\r\n} from '../Queries/Wind';\r\nimport { \r\n    DAILY_SHINE_QUERY,\r\n    ANNUAL_COUNTRY_SHINE_QUERY,\r\n    ANNUAL_REGIONAL_SHINE_QUERY,\r\n    ANNUAL_SHINE_QUERY,\r\n    DAILY_COUNTRY_SHINE_QUERY,\r\n    DAILY_REGIONAL_SHINE_QUERY,\r\n    MONTHLY_COUNTRY_SHINE_QUERY,\r\n    MONTHLY_REGIONAL_SHINE_QUERY,\r\n    MONTHLY_SHINE_QUERY,\r\n} from '../Queries/Shine';\r\nimport { \r\n    DAILY_SNOW_QUERY,\r\n    ANNUAL_COUNTRY_SNOW_QUERY,\r\n    ANNUAL_REGIONAL_SNOW_QUERY,\r\n    ANNUAL_SNOW_QUERY,\r\n    DAILY_COUNTRY_SNOW_QUERY,\r\n    DAILY_REGIONAL_SNOW_QUERY,\r\n    MONTHLY_COUNTRY_SNOW_QUERY,\r\n    MONTHLY_REGIONAL_SNOW_QUERY,\r\n    MONTHLY_SNOW_QUERY,\r\n} from '../Queries/Snow';\r\nimport { useContext } from 'react';\r\nimport { CompareContext } from '../Components/DataOptions/Compare/CompareContext';\r\nimport { ButtonsVisibilityContext } from '../Components/TopBar/ButtonsVisibilityContext';\r\nimport GraphCompareContainer from '../Components/DataVisualisation/Graph/GraphCompareContainer';\r\nimport { DarkContext } from '../Components/DarkContext';\r\nimport { appThemeDark, appThemeLight } from '../Themes';\r\nimport { hydroMeteoTypes } from '../Components/DataOptions/Compare/GraphsForHydroMeteoTypes.json'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    PageContainer: {\r\n        width: '100%',\r\n        minHeight: '100vh',\r\n        justifyContent: 'center',\r\n        alignContent: 'center'\r\n    },\r\n    Container: {\r\n        width: '100%',\r\n        height: '100%'\r\n    },\r\n    LoadingContainer: {\r\n        width: '100%',\r\n        height: '100%'\r\n    }\r\n}));\r\n\r\nfunction CompareGraphPage() {\r\n    const [isDark] = useContext(DarkContext);\r\n    const classes = useStyles();\r\n    const [isVisible, setVisible] = useContext(ButtonsVisibilityContext);\r\n    const [selectedCompare] = useContext(CompareContext);\r\n\r\n    useEffect(() => {\r\n        if (isVisible) setVisible(false);\r\n        window.scrollTo(0, 0);\r\n    }, []);\r\n\r\n    const selectedQuery = ((level, rangeScale, dataType) => {\r\n        if (level === 'region') {\r\n            if (rangeScale === 'daily') {\r\n                if (dataType === 'Temperature') return DAILY_REGIONAL_TEMPERATURE_QUERY;\r\n                else if (dataType === 'Water') return DAILY_REGIONAL_WATER_QUERY;\r\n                else if (dataType === 'Wind') return DAILY_REGIONAL_WIND_QUERY;\r\n                else if (dataType === 'Shine') return DAILY_REGIONAL_SHINE_QUERY;\r\n                else if (dataType === 'Pressure') return DAILY_REGIONAL_PRESSURE_QUERY;\r\n                else if (dataType === 'Snow') return DAILY_REGIONAL_SNOW_QUERY;\r\n                else return DAILY_REGIONAL_PRECIPITATION_QUERY;\r\n            }\r\n            else if (rangeScale === 'monthly') {\r\n                if (dataType === 'Temperature') return MONTHLY_REGIONAL_TEMPERATURE_QUERY;\r\n                else if (dataType === 'Water') return MONTHLY_REGIONAL_WATER_QUERY;\r\n                else if (dataType === 'Wind') return MONTHLY_REGIONAL_WIND_QUERY;\r\n                else if (dataType === 'Shine') return MONTHLY_REGIONAL_SHINE_QUERY;\r\n                else if (dataType === 'Pressure') return MONTHLY_REGIONAL_PRESSURE_QUERY;\r\n                else if (dataType === 'Snow') return MONTHLY_REGIONAL_SNOW_QUERY;\r\n                else return MONTHLY_REGIONAL_PRECIPITATION_QUERY;\r\n            }\r\n            else {\r\n                if (dataType === 'Temperature') return ANNUAL_REGIONAL_TEMPERATURE_QUERY;\r\n                else if (dataType === 'Water') return ANNUAL_REGIONAL_WATER_QUERY;\r\n                else if (dataType === 'Wind') return ANNUAL_REGIONAL_WIND_QUERY;\r\n                else if (dataType === 'Shine') return ANNUAL_REGIONAL_SHINE_QUERY;\r\n                else if (dataType === 'Pressure') return ANNUAL_REGIONAL_PRESSURE_QUERY;\r\n                else if (dataType === 'Snow') return ANNUAL_REGIONAL_SNOW_QUERY;\r\n                else return ANNUAL_REGIONAL_PRECIPITATION_QUERY;\r\n            }\r\n        }\r\n        else if (level === 'country') {\r\n            if (rangeScale === 'daily') {\r\n                if (dataType === 'Temperature') return DAILY_COUNTRY_TEMPERATURE_QUERY;\r\n                else if (dataType === 'Water') return DAILY_COUNTRY_WATER_QUERY;\r\n                else if (dataType === 'Wind') return DAILY_COUNTRY_WIND_QUERY;\r\n                else if (dataType === 'Shine') return DAILY_COUNTRY_SHINE_QUERY;\r\n                else if (dataType === 'Pressure') return DAILY_COUNTRY_PRESSURE_QUERY;\r\n                else if (dataType === 'Snow') return DAILY_COUNTRY_SNOW_QUERY;\r\n                else return DAILY_COUNTRY_PRECIPITATION_QUERY;\r\n            }\r\n            else if (rangeScale === 'monthly') {\r\n                if (dataType === 'Temperature') return MONTHLY_COUNTRY_TEMPERATURE_QUERY;\r\n                else if (dataType === 'Water') return MONTHLY_COUNTRY_WATER_QUERY;\r\n                else if (dataType === 'Wind') return MONTHLY_COUNTRY_WIND_QUERY;\r\n                else if (dataType === 'Shine') return MONTHLY_COUNTRY_SHINE_QUERY;\r\n                else if (dataType === 'Pressure') return MONTHLY_COUNTRY_PRESSURE_QUERY;\r\n                else if (dataType === 'Snow') return MONTHLY_COUNTRY_SNOW_QUERY;\r\n                else return MONTHLY_COUNTRY_PRECIPITATION_QUERY;\r\n            }\r\n            else {\r\n                if (dataType === 'Temperature') return ANNUAL_COUNTRY_TEMPERATURE_QUERY;\r\n                else if (dataType === 'Water') return ANNUAL_COUNTRY_WATER_QUERY;\r\n                else if (dataType === 'Wind') return ANNUAL_COUNTRY_WIND_QUERY;\r\n                else if (dataType === 'Shine') return ANNUAL_COUNTRY_SHINE_QUERY;\r\n                else if (dataType === 'Pressure') return ANNUAL_COUNTRY_PRESSURE_QUERY;\r\n                else if (dataType === 'Snow') return ANNUAL_COUNTRY_SNOW_QUERY;\r\n                else return ANNUAL_COUNTRY_PRECIPITATION_QUERY;\r\n            }\r\n        }\r\n        else {\r\n            if (rangeScale === 'daily') {\r\n                if (dataType === 'Temperature') return DAILY_TEMPERATURE_QUERY;\r\n                else if (dataType === 'Water') return DAILY_WATER_QUERY;\r\n                else if (dataType === 'Wind') return DAILY_WIND_QUERY;\r\n                else if (dataType === 'Shine') return DAILY_SHINE_QUERY;\r\n                else if (dataType === 'Pressure') return DAILY_PRESSURE_QUERY;\r\n                else if (dataType === 'Snow') return DAILY_SNOW_QUERY;\r\n                else return DAILY_PRECIPITATION_QUERY;\r\n            }\r\n            else if (rangeScale === 'monthly') {\r\n                if (dataType === 'Temperature') return MONTHLY_TEMPERATURE_QUERY;\r\n                else if (dataType === 'Water') return MONTHLY_WATER_QUERY;\r\n                else if (dataType === 'Wind') return MONTHLY_WIND_QUERY;\r\n                else if (dataType === 'Shine') return MONTHLY_SHINE_QUERY;\r\n                else if (dataType === 'Pressure') return MONTHLY_PRESSURE_QUERY;\r\n                else if (dataType === 'Snow') return MONTHLY_SNOW_QUERY;\r\n                else return MONTHLY_PRECIPITATION_QUERY;\r\n            }\r\n            else {\r\n                if (dataType === 'Temperature') return ANNUAL_TEMPERATURE_QUERY;\r\n                else if (dataType === 'Water') return ANNUAL_WATER_QUERY;\r\n                else if (dataType === 'Wind') return ANNUAL_WIND_QUERY;\r\n                else if (dataType === 'Shine') return ANNUAL_SHINE_QUERY;\r\n                else if (dataType === 'Pressure') return ANNUAL_PRESSURE_QUERY;\r\n                else if (dataType === 'Snow') return ANNUAL_SNOW_QUERY;\r\n                else return ANNUAL_PRECIPITATION_QUERY;\r\n            }\r\n        }\r\n    });\r\n\r\n    let variables = {}\r\n    if (selectedCompare.level === 'region') {\r\n        variables = {\r\n            regionIDs: selectedCompare.source.map((element) => { return parseInt(element.region) }),\r\n            from: format(selectedCompare.dateRange.from, 'yyyy-MM-dd'),\r\n            to: format(selectedCompare.dateRange.to, 'yyyy-MM-dd')\r\n        };\r\n    } else if (selectedCompare.level === 'country') {\r\n        variables = {\r\n            countryShortcuts: ['CZ'],\r\n            from: format(selectedCompare.dateRange.from, 'yyyy-MM-dd'),\r\n            to: format(selectedCompare.dateRange.to, 'yyyy-MM-dd')\r\n        };\r\n    } else {\r\n        variables = {\r\n            stationIDs: selectedCompare.source.map((element) => { return element.station }),\r\n            from: format(selectedCompare.dateRange.from, 'yyyy-MM-dd'),\r\n            to: format(selectedCompare.dateRange.to, 'yyyy-MM-dd')\r\n        };\r\n    };\r\n\r\n    const { data: temperatureData, error: temperatureError, loading: temperatureLoading } = useQuery(\r\n        selectedQuery(\r\n            selectedCompare.level,\r\n            selectedCompare.dateRange.scale,\r\n            'Temperature'\r\n        ),\r\n        { \r\n            variables: variables,\r\n            skip: selectedCompare.graphs.temperature.length === 0\r\n        }\r\n    );\r\n    if (temperatureError) console.log(temperatureError);\r\n    //if (temperatureData) console.log(temperatureData);\r\n\r\n    const { data: shineData, error: shineError, loading: shineLoading } = useQuery(\r\n        selectedQuery(\r\n            selectedCompare.level,\r\n            selectedCompare.dateRange.scale,\r\n            'Shine'\r\n        ),\r\n        { \r\n            variables: variables,\r\n            skip: selectedCompare.graphs.shine.length === 0\r\n        }\r\n    );\r\n    if (shineError) console.log(shineError);\r\n    //if (shineData) console.log(shineData);\r\n\r\n    const { data: snowData, error: snowError, loading: snowLoading } = useQuery(\r\n        selectedQuery(\r\n            selectedCompare.level,\r\n            selectedCompare.dateRange.scale,\r\n            'Snow'\r\n        ),\r\n        { \r\n            variables: variables,\r\n            skip: selectedCompare.graphs.snow.length === 0\r\n        }\r\n    );\r\n    if (snowError) console.log(snowError);\r\n    //if (snowData) console.log(snowData);\r\n\r\n    const { data: pressureData, error: pressureError, loading: pressureLoading } = useQuery(\r\n        selectedQuery(\r\n            selectedCompare.level,\r\n            selectedCompare.dateRange.scale,\r\n            'Pressure'\r\n        ),\r\n        { \r\n            variables: variables,\r\n            skip: selectedCompare.graphs.pressure.length === 0\r\n        }\r\n    );\r\n    if (pressureError) console.log(pressureError);\r\n    //if (pressureData) console.log(pressureData);\r\n\r\n    const { data: precipitationData, error: precipitationError, loading: precipitationLoading } = useQuery(\r\n        selectedQuery(\r\n            selectedCompare.level,\r\n            selectedCompare.dateRange.scale,\r\n            'Precipitation'\r\n        ),\r\n        { \r\n            variables: variables,\r\n            skip: selectedCompare.graphs.precipitation.length === 0\r\n        }\r\n    );\r\n    if (precipitationError) console.log(precipitationError);\r\n    //if (precipitationData) console.log(precipitationData);\r\n\r\n    const { data: waterData, error: waterError, loading: waterLoading } = useQuery(\r\n        selectedQuery(\r\n            selectedCompare.level,\r\n            selectedCompare.dateRange.scale,\r\n            'Water'\r\n        ),\r\n        { \r\n            variables: variables,\r\n            skip: selectedCompare.graphs.water.length === 0\r\n        }\r\n    );\r\n    if (waterError) console.log(waterError);\r\n    if (waterData) console.log(waterData);\r\n\r\n    const { data: windData, error: windError, loading: windLoading } = useQuery(\r\n        selectedQuery(\r\n            selectedCompare.level,\r\n            selectedCompare.dateRange.scale,\r\n            'Wind'\r\n        ),\r\n        { \r\n            variables: variables,\r\n            skip: selectedCompare.graphs.wind.length === 0\r\n        }\r\n    );\r\n    if (windError) console.log(windError);\r\n    //if (windData) console.log(windData);\r\n\r\n    return (\r\n        <>\r\n            <ThemeProvider theme={ createMuiTheme(isDark ? appThemeDark : appThemeLight) }>\r\n                <Paper square>\r\n                    <div className={ classes.PageContainer }>\r\n                        { temperatureLoading || shineLoading || snowLoading || pressureLoading || precipitationLoading || waterLoading || windLoading\r\n                            ? (\r\n                                <div className={ classes.LoadingContainer }>\r\n                                    <LoadingComponent />\r\n                                </div>\r\n                            )\r\n                            : (\r\n                                <div className={ classes.Container }>\r\n                                    <GraphCompareContainer\r\n                                        temperatureData={ temperatureData }\r\n                                        shineData={ shineData }\r\n                                        snowData={ snowData }\r\n                                        pressureData={ pressureData }\r\n                                        precipitationData={ precipitationData }\r\n                                        windData={ windData }\r\n                                        waterData={ waterData }\r\n                                        level={ selectedCompare.level }\r\n                                        scale={ selectedCompare.dateRange.scale }\r\n                                        hydrometeoTypes={ hydroMeteoTypes }\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Paper>\r\n            </ThemeProvider>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CompareGraphPage\r\n","E:\\Coding projects\\Bakalarka\\eco-web\\Frontend\\eco-web\\src\\Components\\DataVisualisation\\Graph\\GraphCompareContainer.js",[],{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","replacedBy":"239"},{"ruleId":"236","replacedBy":"240"},{"ruleId":"238","replacedBy":"241"},{"ruleId":"242","severity":1,"message":"243","line":59,"column":12,"nodeType":"244","messageId":"245","endLine":59,"endColumn":27},{"ruleId":"246","severity":1,"message":"247","line":118,"column":8,"nodeType":"248","endLine":118,"endColumn":10,"suggestions":"249"},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],["250"],["251"],"no-unused-vars","'selectedOptions' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isVisible' and 'setVisible'. Either include them or remove the dependency array.","ArrayExpression",["252"],"no-global-assign","no-unsafe-negation",{"desc":"253","fix":"254"},"Update the dependencies array to be: [isVisible, setVisible]",{"range":"255","text":"256"},[3888,3890],"[isVisible, setVisible]"]